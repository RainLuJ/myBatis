<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--sql映射文件的使用-->

<!--
    sql映射文件：写sql语句的，mybatis会执行这些sql语句

    1、指定约束文件：文档类型定义(Document Type Definition)
        <!DOCTYPE mapper
            PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
            mybatis-3-mapper.dtd是约束文件的名称，扩展名为【.dtd】

    2、约束文件作用：
        检查在当前映射文件中出现的标签是否符合mybatis的要求

    3、mapper是当前文件的根标签
      namespace中的字符串是自定义的，其中写上【所映射接口的全限定名称】
      作用是为了避免id冲突。（可能在多个mapper文件中存在同名的id）

    4、在当前文件中，使用规定好的标签，来对数据库执行操作
        <select>：表示查询语句
        <update>：表示更新数据库的指定内容
        <insert>：表示插入数据至数据库中
        <delete>：表示删除数据库中指定的内容

    5、DAO接口中不要使用重载方法！！！会徒增维护烦恼！！！
-->
<mapper namespace="com.lujun61.dao.StudentDAO">

    <!--
        select：表示查询操作
        id：具有唯一值，与dao接口中的目标方法名称对应

        resultType：是指SQL语句执行完毕后，所得到的结果将要转为哪个类型对象的【属性】
                    （也可以看做接口中【方法的返回值类型】或者【集合的'<>'中的类型】）
            =>mybatis遍历ResultSet，最终得到的结果类型【全限定名称】。可以使用别名！
            *****mybatis内部处理方式：*****
                <==
                    mybatis执行SQL语句，得到ResultSet
                    mybatis调用resultType中对应类的无参数构造方法，创建对象
                    mybatis把ResultSet中的【列值】赋值给所创建的对象中同名的属性
                    mybatis把对象存入到 List集合 中返回
                        或者
                    存入到 单个对象 中返回
                ==>
    -->
    <select id="selectStudent" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student order by id
    </select>

    <insert id="insertStudent">
        insert into student.student values(#{id},#{name},#{email},#{age})
    </insert>

    <update id="updateStudent">
        update student.student set age=#{age} where id=#{id}
    </update>

    <delete id="deleteStudent">
        delete from student.student where id=#{id}
    </delete>

    <!--参数类型parameterType：可以不写。反射机制会搞定一切！-->
    <!--
        parameterType：dao接口中方法参数的数据类型
            其值类型为：java的数据类型【全限定名称】或者是mybatis定义的【别名】
    -->
    <select id="selectStudentById" parameterType="java.lang.Integer" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where id=#{parameterId}
    </select>

    <!--
        使用@param注解，传入多个参数
    -->
    <select id="seleceStudentByAnnotation" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where id=#{annotateId} or name=#{annotateName}
    </select>

    <!-- 使用@param注解作参数传递：既有对象，又有普通类型属性 -->
    <select id="selectStudentUseObjAndNormalVar" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where id=#{id} or name=#{stu.name}
    </select>


    <!--
        使用java对象，传入多个参数

            语法：
                #{属性名,javaType=java中的数据类型,jdbcType=jdbc中的数据类型}

                例如：
                #{属性名,javaType=java.lang.Integer,jdbcType=Integer}
        · 如果采⽤POJO对象传参：
            #{} ⾥写的是【get⽅法】的⽅法名去掉get之后将剩下的单词⾸字⺟变⼩写所得的“属性名”。
        （例如：getAge对应的是#{age}，getUserName对应的是#{userName}），如果get⽅法不存在会报错。

        <==   SQL语句：未简写版
            select id,name,email,age from student where
            id=#{id,javaType=java.lang.Integer,jdbcType=INTEGER}
            or
            name=#{name,javaType=java.lang.String,jdbcType=VARCHAR}
        ==>
            但是在开发中【使用最多】的形式是：
                #{属性名}；关于javaType和jdbcType是什么，反射机制会给出答案！
    -->
    <select id="seleceStudentByObj" resultType="com.lujun61.entity.Student">
        /* 这是简写的SQL语句 */
        select id,name,email,age from student.student where id=#{id} or name=#{name}
    </select>

    <!--
        按参数位置传参
            最不好用；容易出错
            #{arg0}、#{arg1}……中的 argXXX 代表参数在列表中的位置：prefix以arg开头，则参数索引从0开始
            #{param1}、#{param2}……中的 paramXXX 代表参数在列表中的位置：prefix以param开头，则参数索引从1开始

            扩展：
                mybatis3.4之前的版本使用格式为：#{0}、#{1}……
    -->
    <!--使用com.lujun61.entity.Student的别名：stu/STU（不区分大小写）-->
    <select id="seleceStudentByPosit" resultType="stu">
        <!--<select id="seleceStudentByPosit" resultType="com.lujun61.entity.Student">-->
        # 1、使用prefix为arg的形式
        select id,name,email,age from student.student where id=#{arg0} or name=#{arg1}

        # 2、使用prefix为param的形式
        # select id,name,email,age from student.student where id=#{param1} or name=#{param2}

        # 3、混着用
        # select id,name,email,age from student.student where id=#{arg0} or name=#{param2}
    </select>

    <!--
        map传参
            map中key的名称即为#{}中的值。
            · 如果采⽤map集合传参，#{} ⾥写的是map集合的key，如果key不存在不会报错，只是数据库表中会插⼊NULL。
    -->
    <select id="seleceStudentByMap" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where id=#{id} or name=#{name}
    </select>


    <!--返回值只有一个-->
    <!--<select id="countStudent" resultType="int"> ：代表包装数据类型Integer -->
    <!--<select id="countStudent" resultType="_int"> ：代表基本数据类型的int -->
    <select id="countStudent" resultType="java.lang.Integer">
        select count(*) from student.student
    </select>


    <!--返回值为Map类型：
            列名是map的key
            列值是map的value

        注意：返回结果最多只能有一行！！！
    -->
    <select id="selectMap" resultType="java.util.HashMap">
        select id,name,email,age from student.student where id=#{id}
    </select>

    <select id="selectAllRetMap" resultType="map">
        select * from student.student
    </select>

    <!--列名与属性名不一致时的解决方案-->
    <!--resultType与resultMap不能一起用！！！-->
    <!--resultMap-->
    <!--作用：当列名与属性名不一致时，可以人为指定赋值关系-->
    <!--这是列名与属性名不一致时的解决方案（1）-->
    <!--首先要定义一个resultMap
            id：自定义名称，表示你定义的这个resultMap的唯一标识
            type：POJO类（对应数据库【实体类】）的全限定名称
    -->
    <resultMap id="studentMap" type="com.lujun61.entity.People">
        <!--ResultSet中列名和对应的java对象中属性的关系-->

        <!--主键列：使用id标签（注意！！！！！这不是必须的。但是官方的解释是什么呢？这样的配置可以让mybatis提高效率。）
            column：数据库表字段名
            property：POJO类中的的属性名
        -->
        <id column="id" property="pId"/>

        <!--非主键列：使用result标签（注意！！！！如果column和property是一样的，就可以省略resultMap映射配置）
            column：列名
            property：java类型的属性名
        -->
        <result column="name" property="pName"/>
        <result column="age" property="pAge"/>
        <result column="email" property="pEmail"/>
    </resultMap>
    <select id="selectResultMap" resultMap="studentMap">
        select id,name,email,age from student.student
    </select>


    <!--这是列名与属性名不一致时的解决方案（2）-->
    <!--
        resultType的默认赋值原则是：【同名的列值】赋值给【同名的属性】
            *****所以这里的解决方案就是给列值起别名*****
    -->
    <select id="selectResultType" resultType="com.lujun61.entity.People">
        select id as pId,name as pName,email as pEmail,age as pAge from student.student
    </select>


    <!--这是列名与属性名不一致时的解决方案（3）-->
    <!--
        需要在mybatis-config.xml文件中配置settings
        但是有代价：必须是【数据库字段命名用下划线分隔】、【POJO类属性名命名用驼峰命名法】！！！！！！！！！
        <settings>
            <setting name="mapUnderscoreToCamelCase" value="true"/>
        </settings>
    -->


    <!--模糊查询-->
    <!--在使用java语句调用时【传值（字段）】-->
    <select id="likeQueryJava" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where name like #{name}
    </select>


    <!--记住这两种格式
          like '%' #{name} '%'    无sql注入的风险
          注意：'%'与#{name}之间的空格分隔不可省略！！！
             与
          like '% ${name} %'      有sql注入的风险
    -->

    <!--由myBatis负责拼接传入的字段-->
    <!--<select id="likeQuerySQL" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where name like '%' #{name} '%'
    </select>-->

    <!--
    <select id="likeQuerySQL" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where name like '% ${name} %'
    </select>
    -->
    <select id="likeQuerySQL" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student where name like '%${name}%'
    </select>


    <!-- ============================动态SQL====================================== -->
    <!--SQL片段复用-->
    <sql id="stuSQL">
        select id,name,email,age from student.student
    </sql>
    <!-- 要使用此SQL片段时，使用 <include refid="sql标签的id"/> 即可 -->

    <!-- <if>标签 -->
    <!--
        对于该标签的执行，当 test 的值为 true 时，会将其包含的 SQL 片断拼接到其所在的 SQL 语句中。
        test属性中的值，不能使用&&，只能使用and。……
        ***** 语法：<if test="条件"> sql 语句的部分 </if> *****
    -->
    <!--
        注意：如果拼接where 1=1，将会导致数据库资源浪费，因为每次查询都需要带上这个条件进行数据库查询。
             小表还可以接受，大表的话，效率就很慢了！
    -->
    <select id="selectQueryByDynamicSQLIf" resultType="com.lujun61.entity.Student">
        <include refid="stuSQL"/> where 1=1
        <if test="name!=null and name!=''">
            and name=#{name}
        </if>
        <if test="id>0">
            or id=#{id}
        </if>
    </select>


    <!-- <where>标签 -->
    <!--
        使用<where/>标签，在有满足条件的【查询条件】时，可以自动在[拼接的SQL语句之前]添加上 where 子句，
        并去掉 if中多余的 and，or等。【没有满足条件的查询条件】时，不会添加where 子句。
        需要注意的是，第一个<if/>标签中的 SQL 片断，可以不包含 and。不过，写上 and 也不错，MyBatis会将多出的 and 去掉。
        但其它<if/>中 SQL 片断的 and必须要求写上。否则 SQL 语句将拼接出错。
        ***** 语法：<where> 其他动态 sql </where> *****
    -->
    <select id="selectQueryByDynamicSQLWhere" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student
        <where>
            <if test="name != null and name != ''">
                name=#{name}
            </if>
            <if test="id>0">
                or id &gt;= #{id}
            </if>
        </where>
    </select>

    <!-- <trim>标签 -->
    <!--
        给动态生成的SQL语句，【添加前后缀】或【删除前后缀】。
        如果所有条件都不成立，导致并没有动态生成SQL语句，就没有前后缀这一说，
        所以prefix、suffix、prefixOverrides、suffixOverrides将会失效。
            prefix：加前缀
            suffix：加后缀
            prefixOverrides：覆盖掉（删除掉）前缀
            suffixOverrides：覆盖掉（删除掉）后缀
    -->
    <select id="selectByMultiConditionWithTrim" resultType="student">
        select * from student.student
        <!--prefix="where" 是在动态生成的SQL前面添加 where-->
        <!--suffixOverrides="and|or" 将动态生成的SQL末尾的and或or去掉-->
        <trim prefix="where" suffixOverrides="and|or">
            <if test="name != null and name != ''">
                name=#{name} or
            </if>
            <if test="id>0">
                id &gt;= #{id}
            </if>
        </trim>
    </select>


    <!-- <set>标签 -->
    <!--
        主要使⽤在update语句当中，⽤来⽣成set关键字，同时去掉最后多余的“,”。
        ⽐如我们只更新提交的不为空的字段，如果提交的数据是空或者""，那么这个字段我们将不更新。
    -->
    <update id="updateBySet">
        update student.student
        <set>
            <if test="carNum != null and carNum != ''">
                car_num = #{carNum},
            </if>
            <if test="brand != null and brand != ''">
                brand = #{brand},
            </if>
            <if test="guidePrice != null and guidePrice != ''">
                guide_price = #{guidePrice},
            </if>
            <if test="produceTime != null and produceTime != ''">
                produce_time = #{produceTime},
            </if>
            <if test="carType != null and carType != ''">
                car_type = #{carType},
            </if>
        </set>
        where
        id = #{id}
    </update>


    <!-- <choose>、<when>、<otherwise>标签 -->
    <!-- 等同于：
        if(){
        }else if(){
        }else{
        }
        只会有一个分支下的语句被执行。
    -->
    <select id="selectByChoose" resultType="student">
        select * from student.student
        <where>
            <choose>
                <when test="brand != null and brand != ''">
                    and brand like "%"#{brand}"%"
                </when>
                <when test="guidePrice != null and guidePrice != ''">
                    and guide_price > #{guidePrice}
                </when>
                <otherwise>
                    and car_type = #{carType}
                </otherwise>
            </choose>
        </where>
    </select>


    <!-- <foreach>标签 -->
    <!--
        <foreach/>标签用于实现对于数组与集合的遍历。需要注意的是：
            collection 表示要遍历的集合类型, list ，array 等。
            open、close、separator 为对遍历内容的 SQL 拼接。

        ➢ collection:表示接口中的方法参数的类型，如果是数组使用array , 如果是list集合使用list
	    ➢ item:自定义的，表示【遍历出来的】数组或集合【成员】的变量
	    ➢ open:循环开始是的字符
	    ➢ close:循环结束时的字符
        ➢ separator:集合成员之间的分隔符
    -->
    <select id="selectQueryByDynamicSQLForeach1" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student
        <if test="list != null and list.size > 0">
            where id in
            <foreach collection="list" item="stuid" open="(" close=")" separator=",">
                #{stuid}
            </foreach>
        </if>
    </select>

    <!--    <select id="selectQueryByDynamicSQLForeach2" resultType="com.lujun61.entity.Student">
            select id,name,email,age from student where id in
            <foreach collection="list" item="stu" open="(" close=")" separator=",">
                #{stu.id}
            </foreach>
        </select>-->
    <!--更灵活/巧妙的写法-->
    <select id="selectQueryByDynamicSQLForeach2" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student
        <if test="list != null and list.size > 0">
            where id in (
            <foreach collection="list" item="stu">
                #{stu.id},
            </foreach>
            -1)
        </if>
    </select>


    <select id="selectAllLimit" resultType="com.lujun61.entity.Student">
        select id,name,email,age from student.student
    </select>



    <!-- 获取插入数据后，自动生成的主键值。
                使用前提：主键必须设置为【自动递增】的，否则会抛出异常。
         useGeneratedKeys="true"：让 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由_数据库内部生成_|_手动插入_的主键。
                           注意：有的数据库可能并不支持属性的自动自增，但没关系，这也说明程序员必须手动插入主键值，
                           那么，配置使用useGeneratedKeys属性，获取到的就是程序员手动插入的这个主键值。
                           这个属性就是为了简化操作而存在的，在某些场景下可以避免手动再获取一次主键值的麻烦。
         keyProperty="id"：指定主键值赋值给_实体对象_的哪个属性。当前案例就表示将主键值赋值给Student对象的id属性。
         keyColumn="id"：在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。
                        其实就是指定数据表中的哪个字段为主键字段。
    -->
    <!--
        keyColumn="id"在这里可以不用配置。
     -->
    <insert id="insertCarUseGeneratedKeys" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into student.student(name, email, age) values(#{name},#{email},#{age})
    </insert>
</mapper>